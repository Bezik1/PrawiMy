/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { Suspense, useEffect, useRef, useState } from 'react'
import { useFrame, useThree } from "@react-three/fiber"
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Group, Vector3 } from 'three'
import { EffectComposer, Noise, Bloom } from '@react-three/postprocessing'
import gsap from 'gsap'
import { useViewContextProvider } from '../../contexts/ViewContext'
import { useResize } from '../../hooks/useResize'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {
    Hologram: THREE.MeshStandardMaterial
  }
}

export function Model({ pos } : { pos: [number, number] }) {
  const [size, setSize] = useState(2.98)
  const ifWidth = useResize()
  const { isView } = useViewContextProvider()
  const ref = useRef<Group>(null!)

  //@ts-ignore
  const { nodes, materials } = useGLTF('models/face.glb') as GLTFResult
  const { camera } = useThree()

  useEffect(() =>{
    !ifWidth && (ref.current.rotation.y = 0)
  }, [ifWidth])

  if(!isView){
    if(ref.current){
      const { x,y, z } = ref.current.position

      camera.lookAt(new Vector3(x, y+0.5, z))
    }
  }

  useEffect(() =>{
    gsap.to(ref.current.rotation, {
      x: 0,
      y: 0,
      z: 0
    })
  }, [isView])

  useFrame(() =>{
    if(!isView && ifWidth){
      gsap.to(ref.current.rotation, {
        x: (pos[1] / 2000) - 0.1,
        y: (pos[0] / 1600) - (Math.PI - 2.5)
      })
    }
  })

  useEffect(() =>{
    const handleResize = () =>{
      if(window.innerWidth <= 400) {
        setSize(0.98)
      } else {
        setSize(window.innerWidth / 501.67)
      }
    }

    window.addEventListener('resize', () => handleResize)

    return () => window.removeEventListener('resize', () => handleResize)
  })

  return (
    <EffectComposer>
      <group dispose={null} ref={ref} position={[0, -0.5, -1.4]}>
        <mesh 
          geometry={nodes.Cube.geometry} 
          material={materials.Hologram} 
          scale={size} 
        />
      </group>
        <Bloom
          luminanceThreshold={0.3}
          luminanceSmoothing={0.7}
          height={400}
          opacity={0.5}
        />
        <Noise opacity={0.01} />
      </EffectComposer>
  )
}

useGLTF.preload('models/face.glb')
